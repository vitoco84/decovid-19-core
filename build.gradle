buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.36.1070'
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

apply plugin: 'cz.habarta.typescript-generator'

group = 'ch.vitoco'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "vitoco84_decovid-19-core"
        property "sonar.organization", "vitoco84"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "**/src/main/java/ch/vitoco/decovid19core/constants/**"
        property "sonar.exclusions", "**/src/main/java/ch/vitoco/decovid19core/config/**"
        property "sonar.exclusions", "**/src/main/java/ch/vitoco/decovid19core/controller/**"
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    finalizedBy jacocoTestReport
    include '**/*Test*.class'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator:${libs.versions.springBoot.get()}"
    implementation "org.springframework.boot:spring-boot-starter-web:${libs.versions.springBoot.get()}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${libs.versions.webFlux.get()}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${libs.versions.springBoot.get()}"
    implementation "org.springdoc:springdoc-openapi-ui:${libs.versions.openapi.get()}"
    implementation "io.github.ehn-digital-green-development:base45:${libs.versions.base45.get()}"
    implementation "com.google.zxing:core:${libs.versions.zxing.get()}"
    implementation "com.google.zxing:javase:${libs.versions.zxing.get()}"
    implementation "com.google.iot.cbor:cbor:${libs.versions.cbor.get()}"
    implementation "com.augustcellars.cose:cose-java:${libs.versions.coseJava.get()}"
    implementation "org.apache.clerezza.ext:org.json.simple:${libs.versions.jsonSimple.get()}"
    implementation "commons-codec:commons-codec:${libs.versions.commonsCodec.get()}"
    implementation "org.bouncycastle:bcprov-jdk15on:${libs.versions.bouncyCastle.get()}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${libs.versions.bouncyCastle.get()}"
    implementation "org.apache.commons:commons-compress:${libs.versions.commonsCompress.get()}"
    implementation "com.nimbusds:nimbus-jose-jwt:${libs.versions.nimbusJoseJwt.get()}"

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "com.squareup.okhttp3:mockwebserver:${libs.versions.mockWebServer.get()}"
    testImplementation "com.squareup.okhttp3:okhttp:${libs.versions.mockWebServer.get()}"
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classes = [
            'ch.vitoco.decovid19core.model.hcert.HcertDTO',
            'ch.vitoco.decovid19core.model.hcert.HcertContentDTO',
            'ch.vitoco.decovid19core.model.hcert.HcertPublicKeyDTO',
            'ch.vitoco.decovid19core.model.hcert.HcertTimeStampDTO',
            'ch.vitoco.decovid19core.server.HcertServerRequest',
            'ch.vitoco.decovid19core.server.HcertServerResponse',
            'ch.vitoco.decovid19core.server.PEMCertServerRequest',
            'ch.vitoco.decovid19core.server.PEMCertServerResponse',
            'ch.vitoco.decovid19core.server.HcertVerificationServerRequest',
            'ch.vitoco.decovid19core.server.HcertVerificationServerResponse',
            'ch.vitoco.decovid19core.server.ValidationErrorServerResponse',
            'ch.vitoco.decovid19core.server.QRCodeServerRequest'
    ]
    outputFile = 'build/generated/decovid19client-communication.ts'
    outputFileType = 'implementationFile'
    outputKind = 'module'
    namespace = 'ClientCommunication'
    stringQuotes = 'singleQuotes'
}

tasks.named('test') {
    useJUnitPlatform()
}
